//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UtilitySale.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UtilitySale_DBEntities : DbContext
    {
        public UtilitySale_DBEntities()
            : base("name=UtilitySale_DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<InvoiceItem> InvoiceItem { get; set; }
        public virtual DbSet<Payment> Payment { get; set; }
        public virtual DbSet<People> People { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductPrice> ProductPrice { get; set; }
        public virtual DbSet<ProductSuply> ProductSuply { get; set; }
        public virtual DbSet<vw_Items> vw_Items { get; set; }
        public virtual DbSet<Tax> Tax { get; set; }
        public virtual DbSet<Invoice> Invoice { get; set; }
        public virtual DbSet<vw_Invoice2> vw_Invoice2 { get; set; }
        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<vw_total> vw_total { get; set; }
        public virtual DbSet<Check> Check { get; set; }
    
        public virtual int CreateInvoice(Nullable<int> id, string date, Nullable<long> price, string desc)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(long));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateInvoice", idParameter, dateParameter, priceParameter, descParameter);
        }
    
        public virtual int DeletePeople(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePeople", idParameter);
        }
    
        public virtual int DeletePrice(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePrice", idParameter);
        }
    
        public virtual int DeleteProduct(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProduct", idParameter);
        }
    
        public virtual int DeleteSuply(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSuply", idParameter);
        }
    
        public virtual ObjectResult<GetLastInvoiceID_Result> GetLastInvoiceID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLastInvoiceID_Result>("GetLastInvoiceID");
        }
    
        public virtual int InsertCompany(string name, string tel, string mobile, string desc)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("tel", tel) :
                new ObjectParameter("tel", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCompany", nameParameter, telParameter, mobileParameter, descParameter);
        }
    
        public virtual int InsertItems(Nullable<int> pid, Nullable<int> invoiceid, Nullable<int> count, Nullable<long> fee, Nullable<long> feetotal)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var invoiceidParameter = invoiceid.HasValue ?
                new ObjectParameter("invoiceid", invoiceid) :
                new ObjectParameter("invoiceid", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            var feeParameter = fee.HasValue ?
                new ObjectParameter("fee", fee) :
                new ObjectParameter("fee", typeof(long));
    
            var feetotalParameter = feetotal.HasValue ?
                new ObjectParameter("feetotal", feetotal) :
                new ObjectParameter("feetotal", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertItems", pidParameter, invoiceidParameter, countParameter, feeParameter, feetotalParameter);
        }
    
        public virtual int InsertPay(Nullable<int> id, Nullable<long> pay, string date, string status, string save)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var payParameter = pay.HasValue ?
                new ObjectParameter("Pay", pay) :
                new ObjectParameter("Pay", typeof(long));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var saveParameter = save != null ?
                new ObjectParameter("save", save) :
                new ObjectParameter("save", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPay", idParameter, payParameter, dateParameter, statusParameter, saveParameter);
        }
    
        public virtual int InsertPeople(string name, string tel, string address, Nullable<long> deptor, Nullable<long> creditor, string type)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("tel", tel) :
                new ObjectParameter("tel", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var deptorParameter = deptor.HasValue ?
                new ObjectParameter("deptor", deptor) :
                new ObjectParameter("deptor", typeof(long));
    
            var creditorParameter = creditor.HasValue ?
                new ObjectParameter("creditor", creditor) :
                new ObjectParameter("creditor", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPeople", nameParameter, telParameter, addressParameter, deptorParameter, creditorParameter, typeParameter);
        }
    
        public virtual int insertPrice(Nullable<int> id, Nullable<long> feebuy, Nullable<long> feesell, string desc)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var feebuyParameter = feebuy.HasValue ?
                new ObjectParameter("feebuy", feebuy) :
                new ObjectParameter("feebuy", typeof(long));
    
            var feesellParameter = feesell.HasValue ?
                new ObjectParameter("feesell", feesell) :
                new ObjectParameter("feesell", typeof(long));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertPrice", idParameter, feebuyParameter, feesellParameter, descParameter);
        }
    
        public virtual int InsertProduct(string name, Nullable<int> count, Nullable<long> fee, string unit, string desc)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            var feeParameter = fee.HasValue ?
                new ObjectParameter("fee", fee) :
                new ObjectParameter("fee", typeof(long));
    
            var unitParameter = unit != null ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProduct", nameParameter, countParameter, feeParameter, unitParameter, descParameter);
        }
    
        public virtual int InsertSuply(Nullable<int> id, Nullable<int> suply, string status, string desc)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var suplyParameter = suply.HasValue ?
                new ObjectParameter("suply", suply) :
                new ObjectParameter("suply", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSuply", idParameter, suplyParameter, statusParameter, descParameter);
        }
    
        public virtual ObjectResult<SelectPeople_Result> SelectPeople()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPeople_Result>("SelectPeople");
        }
    
        public virtual ObjectResult<ShowPayment_Result> ShowPayment(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowPayment_Result>("ShowPayment", idParameter);
        }
    
        public virtual ObjectResult<showPeople_Result> showPeople()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showPeople_Result>("showPeople");
        }
    
        public virtual ObjectResult<showProduct_Result> showProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showProduct_Result>("showProduct");
        }
    
        public virtual int UpdateCompany(string name, string tel, string mobile, string desc)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("tel", tel) :
                new ObjectParameter("tel", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCompany", nameParameter, telParameter, mobileParameter, descParameter);
        }
    
        public virtual int UpdateCreditor(Nullable<int> id, Nullable<long> creditor)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var creditorParameter = creditor.HasValue ?
                new ObjectParameter("Creditor", creditor) :
                new ObjectParameter("Creditor", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCreditor", idParameter, creditorParameter);
        }
    
        public virtual int UpdateDeptor1(Nullable<int> id, Nullable<long> deptor)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var deptorParameter = deptor.HasValue ?
                new ObjectParameter("deptor", deptor) :
                new ObjectParameter("deptor", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDeptor1", idParameter, deptorParameter);
        }
    
        public virtual int UpdateDeptor2(Nullable<int> id, Nullable<long> deptor)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var deptorParameter = deptor.HasValue ?
                new ObjectParameter("deptor", deptor) :
                new ObjectParameter("deptor", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDeptor2", idParameter, deptorParameter);
        }
    
        public virtual int UpdatePeople(Nullable<int> id, string name, string tel, string address, Nullable<long> deptor, Nullable<long> creditor, string type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("tel", tel) :
                new ObjectParameter("tel", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var deptorParameter = deptor.HasValue ?
                new ObjectParameter("deptor", deptor) :
                new ObjectParameter("deptor", typeof(long));
    
            var creditorParameter = creditor.HasValue ?
                new ObjectParameter("creditor", creditor) :
                new ObjectParameter("creditor", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePeople", idParameter, nameParameter, telParameter, addressParameter, deptorParameter, creditorParameter, typeParameter);
        }
    
        public virtual int UpdatePrice(Nullable<int> id, Nullable<long> price)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePrice", idParameter, priceParameter);
        }
    
        public virtual int UpdateProduct(Nullable<int> id, string name, Nullable<int> count, Nullable<long> fee, string unit, string desc)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            var feeParameter = fee.HasValue ?
                new ObjectParameter("fee", fee) :
                new ObjectParameter("fee", typeof(long));
    
            var unitParameter = unit != null ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProduct", idParameter, nameParameter, countParameter, feeParameter, unitParameter, descParameter);
        }
    
        public virtual int Updatesuply1(Nullable<int> id, Nullable<int> suply)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var suplyParameter = suply.HasValue ?
                new ObjectParameter("suply", suply) :
                new ObjectParameter("suply", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Updatesuply1", idParameter, suplyParameter);
        }
    
        public virtual int Updatesuply2(Nullable<int> id, Nullable<int> suply)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var suplyParameter = suply.HasValue ?
                new ObjectParameter("suply", suply) :
                new ObjectParameter("suply", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Updatesuply2", idParameter, suplyParameter);
        }
    
        public virtual int InsertTax(Nullable<int> amount)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTax", amountParameter);
        }
    
        public virtual int UpdateTax(Nullable<int> amount)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTax", amountParameter);
        }
    
        public virtual int RemoveFromInvoice(Nullable<int> id, Nullable<int> id2)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var id2Parameter = id2.HasValue ?
                new ObjectParameter("id2", id2) :
                new ObjectParameter("id2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveFromInvoice", idParameter, id2Parameter);
        }
    
        public virtual int CloseInvoice(Nullable<int> id, Nullable<long> price, Nullable<long> pricetax, string desc)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(long));
    
            var pricetaxParameter = pricetax.HasValue ?
                new ObjectParameter("Pricetax", pricetax) :
                new ObjectParameter("Pricetax", typeof(long));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CloseInvoice", idParameter, priceParameter, pricetaxParameter, descParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> total(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("total", idParameter);
        }
    
        public virtual ObjectResult<ShowInvoice_Result> ShowInvoice(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowInvoice_Result>("ShowInvoice", idParameter);
        }
    
        public virtual int InsertAccount(string name, string number, string shaba, string cart, string bank, string shobe)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            var shabaParameter = shaba != null ?
                new ObjectParameter("shaba", shaba) :
                new ObjectParameter("shaba", typeof(string));
    
            var cartParameter = cart != null ?
                new ObjectParameter("cart", cart) :
                new ObjectParameter("cart", typeof(string));
    
            var bankParameter = bank != null ?
                new ObjectParameter("bank", bank) :
                new ObjectParameter("bank", typeof(string));
    
            var shobeParameter = shobe != null ?
                new ObjectParameter("shobe", shobe) :
                new ObjectParameter("shobe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAccount", nameParameter, numberParameter, shabaParameter, cartParameter, bankParameter, shobeParameter);
        }
    
        public virtual int UpdateAccount(string name, string number, string shaba, string cart, string bank, string shobe)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            var shabaParameter = shaba != null ?
                new ObjectParameter("shaba", shaba) :
                new ObjectParameter("shaba", typeof(string));
    
            var cartParameter = cart != null ?
                new ObjectParameter("cart", cart) :
                new ObjectParameter("cart", typeof(string));
    
            var bankParameter = bank != null ?
                new ObjectParameter("bank", bank) :
                new ObjectParameter("bank", typeof(string));
    
            var shobeParameter = shobe != null ?
                new ObjectParameter("shobe", shobe) :
                new ObjectParameter("shobe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAccount", nameParameter, numberParameter, shabaParameter, cartParameter, bankParameter, shobeParameter);
        }
    
        public virtual ObjectResult<peopleinvoice_Result> peopleinvoice(Nullable<int> id3)
        {
            var id3Parameter = id3.HasValue ?
                new ObjectParameter("id3", id3) :
                new ObjectParameter("id3", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<peopleinvoice_Result>("peopleinvoice", id3Parameter);
        }
    
        public virtual ObjectResult<Show_Result> Show(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Show_Result>("Show", idParameter);
        }
    
        public virtual ObjectResult<show2_Result> show2(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<show2_Result>("show2", idParameter);
        }
    
        public virtual int CheckPassed(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckPassed", idParameter);
        }
    
        public virtual int DeleteCheck(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCheck", idParameter);
        }
    
        public virtual int InsertCheck(Nullable<int> pid, string number, string date, string bank, Nullable<long> price, string type, string desc)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var bankParameter = bank != null ?
                new ObjectParameter("bank", bank) :
                new ObjectParameter("bank", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCheck", pidParameter, numberParameter, dateParameter, bankParameter, priceParameter, typeParameter, descParameter);
        }
    
        public virtual int UpdateCheck(Nullable<int> id, string number, string date, string bank, Nullable<long> price, string type, string desc)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var bankParameter = bank != null ?
                new ObjectParameter("bank", bank) :
                new ObjectParameter("bank", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCheck", idParameter, numberParameter, dateParameter, bankParameter, priceParameter, typeParameter, descParameter);
        }
    
        public virtual int InsertPayment(Nullable<int> id, Nullable<long> pay, string date, string status, string save)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var payParameter = pay.HasValue ?
                new ObjectParameter("Pay", pay) :
                new ObjectParameter("Pay", typeof(long));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var saveParameter = save != null ?
                new ObjectParameter("save", save) :
                new ObjectParameter("save", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPayment", idParameter, payParameter, dateParameter, statusParameter, saveParameter);
        }
    
        public virtual int MinesDeptor(Nullable<int> id, Nullable<long> deptor)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var deptorParameter = deptor.HasValue ?
                new ObjectParameter("deptor", deptor) :
                new ObjectParameter("deptor", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MinesDeptor", idParameter, deptorParameter);
        }
    }
}
